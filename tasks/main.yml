#!/usr/bin/env ansible-playbook
---
- hosts: all

  vars:
    user_name: a.knapp
    # create a password with mkpasswd: See Readme for usage
    user_password: $6$rounds=5000$BpIHpb3bpGT63YXl$84p2KgSN.BsyyFU4MHj4dSG2o8HmbAaW5G/79D7btsPFqZPRd6nMf3BpP7cWhjMbMHdRwh6tr2NaFzSJ63Qu31
    # The XKB keyboard layout name: Sets the keyboard language (de: german, us: english)
    keyboard_layout: de
    # set the path to your .bashrc if you want it to be deployed. If not set or path is wrong, this will be skipped
    src_bashrc: ~/.bashrc
    # set the path to your private key if you want it to be deployed. If not set or path is wrong, this will be skipped
    src_private_ssh_key: ~/.ssh/id_rsa
    # set the path to your ssh config file if you want it to be deployed. If not set or path is wrong, this will be skipped
    src_ssh_config: ~/.ssh/eon/config

    packages_to_install: [
      vim, nodejs, npm, git, git-flow, tree, docker.io, ruby2.3-dev, vagrant, virtualbox
    ]
    ruby_gems_to_install: [ kitchen-docker ]
    # choose `yes` or `no`if you want to have the chefDK to be installed or not
    install_chef: yes
    chefdk_deb_url: "https://packages.chef.io/stable/ubuntu/12.04/chefdk_0.18.30-1_amd64.deb"
    chefdk_deb_filename: /tmp/chefdk.deb
    chefdk_deb_checksum: "sha256:83e5fcb7efa840755a56db0ada03747f7b5d2385c41455d06039f76b7cf66699"

    install_atom: no
    atom_deb_url: "https://github.com/atom/atom/releases/download/v1.11.2/atom-amd64.deb"
    atom_deb_filename: /tmp/atom.deb

    install_visual_studio_code: yes
    visual_studio_code_url: "https://go.microsoft.com/fwlink/?LinkID=760868"
    visual_studio_code_deb_filename: /tmp/code.deb

    
    # with gitlab_mainurl and workspaces, this playbook will automatically create workspace directories and 
    # clone some projects inside them. 
    # A workspace directory will be created to /home/<username>/<name> where the corresponding Git projects will be cloned into.
    gitlab_mainurl: git.dev.eon.com
    workspaces:
      - name: workspace/eon/infrastructure
        git_group: espp-infrastructure
        git_projects: 
          - espp-network-arm
          - chef-repo-espp-shark-pdev
          - chef-repo-espp-shark-dev
      - name: workspace/eon/cookbooks
        git_group: espp-cookbooks
        git_projects: 
          - espp_base
          - espp_batch_jobs

  # create this file using ansible vault (see `Usage` in the README.md)
  vars_files:
    - ../files/git-credentials.yml
 
  tasks:

  - name: Update apt cache
    become: yes
    apt: update_cache=yes
  
  - name: Allow 'sudo' group to have passwordless sudo
    become: yes
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%sudo'
      line: '%sudo ALL=(ALL) NOPASSWD: ALL'

  - name: Create User
    become: yes
    user: >
      name={{ user_name }}
      password={{ user_password }}
      shell=/bin/bash
      groups=sudo
      append=yes

  - name: install keyboard-configuration
    become: yes
    apt:
      name: keyboard-configuration
      state: present

  - name: write keyboard configration
    become: yes
    template:
      src: keyboard.j2
      dest: /etc/default/keyboard
      force: yes
      owner: root
      group: root
      mode: 'u=rw,go=r'
    register: keyboard_config

  - name: apply keyboard configration
    become: yes
    command: /usr/sbin/dpkg-reconfigure -f noninteractive keyboard-configuration
    when: keyboard_config.changed
  
  - local_action: stat path={{ src_bashrc }}
    register: bashrc
  - debug: msg="the path {{ src_bashrc }} does not exist on your local PC - copy skipped"
    when: bashrc.stat.exists == False
  - name: deploy bashrc file
    become: yes
    template: 
      src: "{{ src_bashrc }}"
      dest: "/home/{{ user_name }}/.bashrc"
      owner: "{{ user_name }}"
      group: "{{ user_name }}"
    when: bashrc.stat.exists
  
  - name: Create .ssh directory
    become: yes
    file: 
      path: "/home/{{ user_name }}/.ssh" 
      state: directory
      owner: "{{ user_name }}" 
      group: "{{ user_name }}" 

  - local_action: stat path={{ src_private_ssh_key }}
    register: private_ssh_key
  - debug: msg="the path {{ src_private_ssh_key }} does not exist on your local PC - copy skipped"
    when: private_ssh_key.stat.exists == False
  - name: deploy private ssh key
    become: yes
    copy: 
      src: "{{ src_private_ssh_key }}"
      dest: "/home/{{ user_name }}/.ssh/id_rsa"
      owner: "{{ user_name }}" 
      group: "{{ user_name }}" 
      mode: "u+r,g-rwx,o-rwx"
    when: private_ssh_key.stat.exists
 
  - local_action: stat path={{ src_ssh_config }}
    register: ssh_config
  - debug: msg="the path {{ src_ssh_config }} does not exist on your local PC - copy skipped"
    when: ssh_config.stat.exists == False
  - name: deploy ssh config file
    become: yes
    copy: 
      src: "{{ src_ssh_config }}" 
      dest: "/home/{{ user_name }}/.ssh/config" 
      owner: "{{ user_name }}" 
      group: "{{ user_name }}"
    when: ssh_config.stat.exists

  - name: install ubuntu packages
    become: yes
    apt: pkg={{ item }} state=installed
    with_items: "{{ packages_to_install }}"

  - name: install node.js packages with npm
    become: yes
    npm: name={{ item }} global=yes
    with_items:
      - azure-cli

  - name: check if chefdk is installed
    command: dpkg-query -W chefdk
    register: is_chefdk_installed
    failed_when: is_chefdk_installed.rc > 1
    changed_when: is_chefdk_installed.rc == 1
    notify:
      - download chefdk
    when: "{{ install_chef }}"
  
  - name: use ruby2.3 per default
    become: yes
    file: path=/usr/bin/ruby src=/usr/bin/ruby2.3 state=link
    
  - name: use gem2.3 per default
    become: yes
    file: path=/usr/bin/gem src=/usr/bin/gem2.3 state=link

  - name: install ruby gems
    become: yes
    gem: name={{ item  }} state=latest
    with_items: '{{ ruby_gems_to_install }}'

  - name: check if Atom is installed
    command: dpkg-query -W atom
    register: is_atom_installed
    failed_when: is_atom_installed.rc > 1
    changed_when: is_atom_installed.rc == 1
    notify:
      - download atom
    when: "{{ install_atom }}"

  - name: check if Visual Studio Code is installed
    command: dpkg-query -W code
    register: is_visual_studio_code_installed
    failed_when: is_visual_studio_code_installed.rc > 1
    changed_when: is_visual_studio_code_installed.rc == 1
    notify:
      - download visual studio code
    when: "{{ install_visual_studio_code }}"

  - name: Create workspace directories
    become: yes
    file: 
      path: "/home/{{ user_name }}/{{ item.name }}" 
      state: directory
      owner: "{{ user_name }}" 
      group: "{{ user_name }}" 
    with_items: "{{ workspaces }}"
    when: item.0 is defined

  - git: 
      repo: https://{{ git.user }}:{{ git.password }}@{{ gitlab_mainurl }}/{{ item.0.git_group }}/{{ item.1 }}.git
      dest: /home/{{ user_name }}/{{ item.0.name }}/{{ item.1 }}
    become: yes
    become_user: "{{ user_name }}" 
    with_subelements:
      - "{{ workspaces }}"
      - git_projects



  handlers:
  - name: download chefdk
    get_url: url='{{ chefdk_deb_url }}' dest='{{ chefdk_deb_filename }}' checksum='{{ chefdk_deb_checksum }}'
    notify:
      - install chefdk

  - name: install chefdk
    become: yes
    apt: deb="{{ chefdk_deb_filename }}"

  - name: download atom
    get_url: url='{{ atom_deb_url }}' dest='{{ atom_deb_filename }}'
    notify:
      - install atom

  - name: install atom
    become: yes
    apt: deb="{{ atom_deb_filename }}"

  - name: download visual studio code
    get_url: url='{{ visual_studio_code_url }}' dest='{{ visual_studio_code_deb_filename }}'
    notify:
      - install visual studio code

  - name: install visual studio code
    become: yes
    apt: deb="{{ visual_studio_code_deb_filename }}"


















